{"version":3,"file":"ExternalModuleNamePlugin.js","sourceRoot":"","sources":["../../../src/lib/converter/plugins/ExternalModuleNamePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ConverterComponent } from '../components';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\nimport { CommentPlugin } from './CommentPlugin';\nimport { Reflection, ReflectionKind } from '../../models/reflections/abstract';\nimport { ContainerReflection } from '../../models/reflections/container';\nimport { getRawComment } from '../factories/comment';\nimport * as ts from \"typescript\";\n\ninterface ModuleRename {\n  renameTo: string;\n  preferred: boolean;\n  reflection: ContainerReflection;\n}\n\n/**\n * This plugin allows an ES6 module to specify its TypeDoc name.\n * It also allows multiple ES6 modules to be merged together into a single TypeDoc module.\n *\n * @usage\n * At the top of an ES6 module, add a \"dynamic module comment\".  Insert \"@module typedocModuleName\"\n *   to specify that this ES6 module should be merged with module: \"typedocModuleName\".\n *\n * Similar to the [[DynamicModulePlugin]], ensure that there is a comment tag (even blank) for the\n * first symbol in the file.\n *\n * @example\n * ```\n *\n * &#47;**\n *  * @module newModuleName\n *  *&#47;\n * &#47;** for typedoc &#47;\n * import {foo} from \"../foo\";\n * export let bar = \"bar\";\n * ```\n *\n * Also similar to [[DynamicModulePlugin]], if @preferred is found in a dynamic module comment, the\n *   comment will be used as the module comment, and documentation will be generated from it (note:\n *   this plugin does not attempt to count lengths of merged module comments in order to guess the\n *   best one)\n */\n@Component({name:'module-annotation'})\nexport class ModuleAnnotationPlugin extends ConverterComponent {\n  /** List of module reflections which are models to rename */\n  private moduleRenames: ModuleRename[];\n\n  /**\n   * Triggered when the converter begins converting a project.\n   *\n   * @param context  The context object describing the current state the converter is in.\n   */\n  private onBegin(context: Context) {\n    this.moduleRenames = [];\n  }\n\n  /**\n   * Create a new CommentPlugin instance.\n   */\n  initialize() {\n    this.listenTo(this.owner, {\n      [Converter.EVENT_BEGIN]:                   this.onBegin,\n      [Converter.EVENT_CREATE_DECLARATION]:      this.onDeclaration,\n      [Converter.EVENT_CREATE_SIGNATURE]:        this.onDeclaration,\n      [Converter.EVENT_RESOLVE_BEGIN]:           this.onBeginResolve,\n    });\n  }\n\n  /**\n   * Triggered when the converter has created a declaration reflection.\n   *\n   * @param context  The context object describing the current state the converter is in.\n   * @param reflection  The reflection that is currently processed.\n   * @param node  The node that is currently processed if available.\n   */\n  private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\n    if (!node) return;\n    var rawComment = getRawComment(node);\n    if (!rawComment) return;\n    \n    if (reflection.kindOf(ReflectionKind.ExternalModule)) {\n      // Look for @module\n      let match   = /@module\\s+(\\w+)/.exec(rawComment);\n      if (match) {\n        // Look for @preferred\n        let preferred = /@preferred/.exec(rawComment);\n        // Set up a list of renames operations to perform when the resolve phase starts\n        this.moduleRenames.push({\n          renameTo: match[1],\n          preferred: preferred != null,\n          reflection: <ContainerReflection> reflection\n        });\n      }\n    }\n  }\n\n  /**\n   * Triggered when the converter begins resolving a project.\n   *\n   * @param context  The context object describing the current state the converter is in.\n   */\n  private onBeginResolve(context: Context) {\n    let projRefs                = context.project.reflections;\n    let refsArray: Reflection[] = Object.keys(projRefs)\n      .reduce((m, k) => {\n        m.push(projRefs[k]);\n        return m;\n      }, []);\n\n    // Process each rename\n    this.moduleRenames.forEach(item => {\n      let renaming    = <ContainerReflection> item.reflection;\n      // Find an existing module that already has the \"rename to\" name.  Use it as the merge target.\n      let mergeTarget = <ContainerReflection>\n        refsArray.filter(ref => ref.kind === renaming.kind && ref.name === item.renameTo)[0];\n\n      // If there wasn't a merge target, just change the name of the current module and exit.\n      if (!mergeTarget) {\n        renaming.name = item.renameTo;\n        return;\n      }\n\n      // Since there is a merge target, relocate all the renaming module's children to the\n      // mergeTarget.\n      let childrenOfRenamed = refsArray.filter(ref => ref.parent === renaming);\n      childrenOfRenamed.forEach((ref: Reflection) => {\n        // update links in both directions\n        ref.parent = mergeTarget;\n        mergeTarget.children.push(<any> ref)\n      });\n\n      // If @preferred was found on the current item, update the mergeTarget's comment\n      // with comment from the renaming module\n      if (item.preferred) {\n        mergeTarget.comment = renaming.comment;\n      }\n\n      // Now that all the children have been relocated to the mergeTarget, delete the empty module\n      // Make sure the module being renamed doesn't have children, or they will be deleted\n      if (renaming.children) {\n        renaming.children.length = 0;\n      }\n      CommentPlugin.removeReflection(context.project, renaming);\n\n      // Remove @module and @preferred from the comment, if found.\n      CommentPlugin.removeTags(mergeTarget.comment, \"module\");\n      CommentPlugin.removeTags(mergeTarget.comment, \"preferred\");\n    });\n  }\n}\n\n\n\n"]}